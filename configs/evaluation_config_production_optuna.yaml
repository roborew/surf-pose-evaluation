# Production Optuna Hyperparameter Optimization Configuration
# Note: Output paths (mlflow, predictions, visualizations, best_params) are automatically
# managed by RunManager when using run_production_evaluation.py. They are organized in
# timestamped folders under results/runs/{timestamp}_{name}/.

# Data Source Configuration - Production paths with FFV1 format
data_source:
  base_data_path: "./data/SD_02_SURF_FOOTAGE_PREPT"
  video_clips:
    h264_path: "03_CLIPPED/h264"
    ffv1_path: "03_CLIPPED/ffv1"
    input_format: "ffv1" # Production uses ffv1 format
  annotations:
    labels_path: "04_ANNOTATED/surf-manoeuvre-labels"
    maneuver_annotations_file: "maneuver_annotations.json"
    sony_300_labels: "sony_300"
    sony_70_labels: "sony_70"
  splits:
    train_file: "05_ANALYSED_DATA/POSE/splits/train_split.json"
    val_file: "05_ANALYSED_DATA/POSE/splits/val_split.json"
    test_file: "05_ANALYSED_DATA/POSE/splits/test_split.json"
    train_ratio: 0.70
    val_ratio: 0.15
    test_ratio: 0.15
    random_seed: 42
    zoom_handling:
      enabled: true
      balanced_distribution: true
      force_no_zoom_in_val: true
  camera_selection:
    enabled_cameras: ["SONY_300", "SONY_70"] # Production uses both cameras
    max_clips_per_session: 50 # Reasonable subset for optimization speed

# Model Configuration
models:
  mediapipe:
    config_path: "configs/model_configs/mediapipe.yaml"
  blazepose:
    config_path: "configs/model_configs/blazepose.yaml"
  yolov8_pose:
    config_path: "configs/model_configs/yolov8_pose.yaml"
  pytorch_pose:
    config_path: "configs/model_configs/pytorch_pose.yaml"
  mmpose:
    config_path: "configs/model_configs/mmpose.yaml"

# Evaluation Configuration
evaluation:
  quick_test:
    enabled: true
    num_clips: 20
    models: ["yolov8_pose"] # Fast model for quick validation
  comprehensive_test:
    enabled: true
    num_clips: 50 # Smaller for optimization speed
    models: ["mediapipe", "blazepose", "yolov8_pose", "pytorch_pose", "mmpose"]

# Optuna Optimization
optuna:
  enabled: true
  study_name: "surf_pose_optimization_production"
  direction: "maximize" # Maximize PCK accuracy
  n_trials: 100 # Thorough optimization
  timeout: 18000 # 5 hours max
  sampler: "TPESampler"
  pruner: "MedianPruner"

# Performance Configuration (Production optimized)
performance:
  max_workers: 8 # Full utilization for production
  batch_size: 1
  device: "auto" # Auto-detect: CUDA first, then MPS/CPU
  memory_limit_gb: 32
  enable_gpu_memory_growth: true
  half_precision: true # Enable FP16 for RTX 4090

# Minimal configuration for direct usage with evaluate_pose_models.py
# (RunManager will override these with proper paths when using run_production_evaluation.py)
mlflow:
  enabled: true
  experiment_name: "surf_pose_production_optuna"

output:
  predictions:
    enabled: false # DISABLED during Optuna optimization for speed
  visualization:
    enabled: false # DISABLED during Optuna optimization for speed

# Reference configurations (commented out - handled by RunManager or rarely changed)
#
# experiment:
#   name: "surf_pose_production_optuna"
#   description: "Hyperparameter optimization for pose estimation models"
#   version: "1.0"
#   author: "Production Team"
#
# dataset:
#   base_data_path: "./data/SD_02_SURF_FOOTAGE_PREPT"
#   video_clips:
#     input_format: "ffv1"  # Production uses ffv1 format
#   annotations:
#     labels_path: "04_ANNOTATED/surf-manoeuvre-labels"
#   splits:
#     train_ratio: 0.70
#     val_ratio: 0.15
#     test_ratio: 0.15
#     random_seed: 42
#
# hardware:
#   gpu:
#     device_id: 0
#     memory_fraction: 0.9
#     allow_growth: true
#   cpu:
#     num_workers: 8
#     num_threads: 16
#   memory:
#     max_memory_gb: 32
#     cache_enabled: true
#     clear_cache_frequency: 50
#
# logging:
#   level: "INFO"
#   format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
#   save_to_file: true
#
# debug:
#   enabled: false
#   save_intermediate_results: false
#   profile_memory: false
#   profile_compute: false
#   verbose_errors: true
