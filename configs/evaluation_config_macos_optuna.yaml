# macOS Optuna Optimization Configuration
# Note: Output paths (mlflow, predictions, visualizations, best_params) are automatically
# managed by RunManager when using run_evaluation.py. They are organized in
# timestamped folders under results/runs/{timestamp}_{name}/.

# Data Source Configuration - Corrected paths for actual data structure
data_source:
  base_data_path: "./data/SD_02_SURF_FOOTAGE_PREPT"
  video_clips:
    h264_path: "03_CLIPPED/h264"
    ffv1_path: "03_CLIPPED/ffv1"
    input_format: "h264" # Use h264 for macOS compatibility
  annotations:
    labels_path: "04_ANNOTATED/EXPORTED-MANEUVER-LABELS"
    maneuver_annotations_file: "maneuver_annotations.json"
    sony_300_labels: "sony_300"
    sony_70_labels: "sony_70"
  splits:
    train_ratio: 0.70
    val_ratio: 0.15
    test_ratio: 0.15
    random_seed: 42
    zoom_handling:
      enabled: true
      balanced_distribution: true
      force_no_zoom_in_val: true
  camera_selection:
    enabled_cameras: ["SONY_300"] # Focus on SONY_300 for better quality footage
    max_clips_per_session: 10

# Model Configuration
models:
  mediapipe:
    config_path: "configs/model_configs/mediapipe.yaml"
  blazepose:
    config_path: "configs/model_configs/blazepose.yaml"
  yolov8_pose:
    config_path: "configs/model_configs/yolov8_pose.yaml"
  pytorch_pose:
    config_path: "configs/model_configs/pytorch_pose.yaml"
  mmpose:
    config_path: "configs/model_configs/mmpose.yaml"

# Evaluation Configuration
evaluation:
  quick_test:
    enabled: true
    num_clips: 3
    models: ["yolov8_pose"] # Fast model for quick testing
  comprehensive_test:
    enabled: true
    num_clips: 10
    models: ["mediapipe", "blazepose", "yolov8_pose", "pytorch_pose", "mmpose"]

# Optuna Optimization
optuna:
  enabled: true
  study_name: "surf_pose_macos_optimization"
  direction: "maximize"
  n_trials: 20 # Reduced for macOS testing
  timeout_minutes: 120 # 2 hours max
  sampler: "TPESampler"
  pruner: "MedianPruner"

# Performance Configuration (macOS optimized)
performance:
  max_workers: 4 # Conservative for macOS
  batch_size: 1
  device: "mps" # Use Metal Performance Shaders on macOS
  memory_limit_gb: 8
  enable_gpu_memory_growth: true

# Minimal configuration for direct usage with evaluate_pose_models.py
# (RunManager will override these with proper paths when using run_production_evaluation.py)
mlflow:
  enabled: true
  experiment_name: "surf_pose_macos_optuna"

output:
  predictions:
    enabled: true
  visualization:
    enabled: false # Disabled during optimization for speed
